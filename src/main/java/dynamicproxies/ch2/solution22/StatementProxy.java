/*
 * This class forms part of the Dynamic Proxies in Java Course by
 * Dr Heinz Max Kabutz from JavaSpecialists.eu and may not be distributed
 * without written consent.
 *
 * Copyright 2020, Dr Heinz Max Kabutz, All rights reserved.
 */

package dynamicproxies.ch2.solution22;

import dynamicproxies.util.measurement.*;

import java.sql.*;

public class StatementProxy implements Statement {
  private final Statement statement;
  private final TimeMeasuringHandler handler;

  public StatementProxy(Statement statement, TimeMeasuringHandler handler) {
    this.statement = statement;
    this.handler = handler;
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "execute", sql)) {
      return statement.execute(sql);
    }
  }
  @Override
  public boolean execute(String sql,
                         int autoGeneratedKeys) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "execute",
        sql, autoGeneratedKeys)) {
      return statement.execute(sql, autoGeneratedKeys);
    }
  }
  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "execute", sql, columnIndexes)) {
      return statement.execute(sql, columnIndexes);
    }
  }
  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "execute", sql, columnNames)) {
      return statement.execute(sql, columnNames);
    }
  }
  @Override
  public int[] executeBatch() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeBatch")) {
      return statement.executeBatch();
    }
  }
  @Override
  public long[] executeLargeBatch() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeLargeBatch")) {
      return statement.executeLargeBatch();
    }
  }
  @Override
  public long executeLargeUpdate(String sql) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeLargeUpdate", sql)) {
      return statement.executeLargeUpdate(sql);
    }
  }
  @Override
  public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeLargeUpdate", sql, autoGeneratedKeys)) {
      return statement.executeLargeUpdate(sql, autoGeneratedKeys);
    }
  }
  @Override
  public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeLargeUpdate", sql, columnIndexes)) {
      return statement.executeLargeUpdate(sql, columnIndexes);
    }
  }
  @Override
  public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeLargeUpdate", sql, columnNames)) {
      return statement.executeLargeUpdate(sql, columnNames);
    }
  }
  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeQuery", sql)) {
      return statement.executeQuery(sql);
    }
  }
  @Override
  public int executeUpdate(String sql) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeUpdate", sql)) {
      return statement.executeUpdate(sql);
    }
  }
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeUpdate", sql, autoGeneratedKeys)) {
      return statement.executeUpdate(sql, autoGeneratedKeys);
    }
  }
  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeUpdate", sql, columnIndexes)) {
      return statement.executeUpdate(sql, columnIndexes);
    }
  }
  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "executeUpdate", sql, columnNames)) {
      return statement.executeUpdate(sql, columnNames);
    }
  }
  @Override
  public void close() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "close")) {
      statement.close();
    }
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getMaxFieldSize")) {
      return statement.getMaxFieldSize();
    }
  }
  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setMaxFieldSize", max)) {
      statement.setMaxFieldSize(max);
    }
  }
  @Override
  public int getMaxRows() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getMaxRows")) {
      return statement.getMaxRows();
    }
  }
  @Override
  public void setMaxRows(int max) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setMaxRows", max)) {
      statement.setMaxRows(max);
    }
  }
  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setEscapeProcessing", enable)) {
      statement.setEscapeProcessing(enable);
    }
  }
  @Override
  public int getQueryTimeout() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getQueryTimeout")) {
      return statement.getQueryTimeout();
    }
  }
  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setQueryTimeout", seconds)) {
      statement.setQueryTimeout(seconds);
    }
  }
  @Override
  public void cancel() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "cancel")) {
      statement.cancel();
    }
  }
  @Override
  public SQLWarning getWarnings() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getWarnings")) {
      return statement.getWarnings();
    }
  }
  @Override
  public void clearWarnings() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "clearWarnings")) {
      statement.clearWarnings();
    }
  }
  @Override
  public void setCursorName(String name) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setCursorName", name)) {
      statement.setCursorName(name);
    }
  }
  @Override
  public ResultSet getResultSet() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getResultSet")) {
      return statement.getResultSet();
    }
  }
  @Override
  public int getUpdateCount() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getUpdateCount")) {
      return statement.getUpdateCount();
    }
  }
  @Override
  public boolean getMoreResults() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getMoreResults")) {
      return statement.getMoreResults();
    }
  }
  @Override
  public void setFetchDirection(int direction) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setFetchDirection", direction)) {
      statement.setFetchDirection(direction);
    }
  }
  @Override
  public int getFetchDirection() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getFetchDirection")) {
      return statement.getFetchDirection();
    }
  }
  @Override
  public void setFetchSize(int rows) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setFetchSize", rows)) {
      statement.setFetchSize(rows);
    }
  }
  @Override
  public int getFetchSize() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getFetchSize")) {
      return statement.getFetchSize();
    }
  }
  @Override
  public int getResultSetConcurrency() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getResultSetConcurrency")) {
      return statement.getResultSetConcurrency();
    }
  }
  @Override
  public int getResultSetType() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getResultSetType")) {
      return statement.getResultSetType();
    }
  }
  @Override
  public void addBatch(String sql) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "addBatch", sql)) {
      statement.addBatch(sql);
    }
  }
  @Override
  public void clearBatch() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "clearBatch")) {
      statement.clearBatch();
    }
  }
  @Override
  public Connection getConnection() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getConnection")) {
      return statement.getConnection();
    }
  }
  @Override
  public boolean getMoreResults(int current) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getMoreResults", current)) {
      return statement.getMoreResults(current);
    }
  }
  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getGeneratedKeys")) {
      return statement.getGeneratedKeys();
    }
  }
  @Override
  public int getResultSetHoldability() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getResultSetHoldability")) {
      return statement.getResultSetHoldability();
    }
  }
  @Override
  public boolean isClosed() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "isClosed")) {
      return statement.isClosed();
    }
  }
  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setPoolable", poolable)) {
      statement.setPoolable(poolable);
    }
  }
  @Override
  public boolean isPoolable() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "isPoolable")) {
      return statement.isPoolable();
    }
  }
  @Override
  public void closeOnCompletion() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "closeOnCompletion")) {
      statement.closeOnCompletion();
    }
  }
  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "isCloseOnCompletion")) {
      return statement.isCloseOnCompletion();
    }
  }
  @Override
  public long getLargeUpdateCount() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getLargeUpdateCount")) {
      return statement.getLargeUpdateCount();
    }
  }
  @Override
  public void setLargeMaxRows(long max) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "setLargeMaxRows", max)) {
      statement.setLargeMaxRows(max);
    }
  }
  @Override
  public long getLargeMaxRows() throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "getLargeMaxRows")) {
      return statement.getLargeMaxRows();
    }
  }
  @Override
  public String enquoteLiteral(String val) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "enquoteLiteral", val)) {
      return statement.enquoteLiteral(val);
    }
  }
  @Override
  public String enquoteIdentifier(String identifier, boolean alwaysQuote) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "enquoteIdentifier", identifier, alwaysQuote)) {
      return statement.enquoteIdentifier(identifier, alwaysQuote);
    }
  }
  @Override
  public boolean isSimpleIdentifier(String identifier) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "isSimpleIdentifier", identifier)) {
      return statement.isSimpleIdentifier(identifier);
    }
  }
  @Override
  public String enquoteNCharLiteral(String val) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "enquoteNCharLiteral", val)) {
      return statement.enquoteNCharLiteral(val);
    }
  }
  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "unwrap", iface)) {
      return statement.unwrap(iface);
    }
  }
  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    try (var measurer = handler.start("java.sql.Statement", "isWrapperFor", iface)) {
      return statement.isWrapperFor(iface);
    }
  }
}